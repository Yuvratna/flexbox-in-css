Q 1. Describe the main differences between the CSS Flexbox layout model and CSS Grid layout model. when would you choose to use one over the flexbox ?
ans : The basic difference between CSS grid layout and CSS flexbox layout is that 
	flexbox was designed for layout in one dimension - either a row or a column. 

	Grid was designed for two-dimensional layout - rows, and columns at the same time. 

	The two specifications share some common features, however, and if you have already 	learned how to use flexbox, the similarities should help you get to grips with Grid.

Dimensionality and Flexibility :
	Flexbox offers greater control over alignment and space distribution between items. 	Being one-dimensional, Flexbox only deals with either columns or rows. This system 	works for smaller layouts, but cannot render complex displays such as text or 	document-centric properties that enable floats and columns.

	Grid has two-dimension layout capabilities which allow flexible widths as a unit of 	length. This compensates for the limitations in Flex.

Alignment :
	Flexbox allows fine-tuning of alignments to ensure exact specification sharing. 	Flex Direction allows developers to align elements vertically or horizontally, 	which is used when developers create and reverse rows or columns.

	For broader alignments in both dimensions simultaneously, CSS Grid deploys 	fractional measure units for grid fluidity and auto-keyword functionality to 	automatically adjust columns or rows. The in-built automation saves developers from 	re-work regimes that may potentially originate in confused calculations.

Item Management :
	Flex Container is the parent element while Flex Item represents the children. The 	Flex Container can ensure balanced representation by adjusting item dimensions. 	This allows developers to design for fluctuating screen sizes.

	For fine-tuning this aesthetic, Grid supports both implicit and explicit content 	placement. Its inbuilt automation allows it to automatically extend line items and 	copy values into the new creation from the preceding item.

Choosing between Flexbox and CSS Grid depends on your specific layout requirements.

You might choose Flexbox when you need to arrange items along a single axis, for example, when creating navigation bars, header/footer layouts, or aligning elements within a container. Flexbox is great for responsive designs where items can vary in size.

You might choose Css Grid when you need to create more complex, two-dimensional layouts with rows and columns. It's particularly useful when you have a grid-like structure, such as galleries, forms with multiple fields, or any design that requires precise control over both rows and columns.

In some cases, you may even combine both Flexbox and CSS Grid within a single layout to leverage the strengths of each model for different parts of your webpage.
============================================================================================================================================================================================


Q2. Explain the role of the following key properties in the Flexbox layout model

1. justify-content

2. align-items

3. gap

4. flex-direction

5. flex-wrap

Ans)

1. justify-content: The justify-content property in Flexbox is used to control the alignment of flex items along the main axis of the flex container. It determines how the extra space or insufficient space along the main axis is distributed. There are several values for justify-content, including flex-start, flex-end, center, space- between, space-evenly and space-around.

For example, if you set justify-content: center;, flex items will be centered along the main axis of the container. If you set justify-content: space-between; the first item will be aligned to the start, the last item to the end, and the remaining space will be distributed evenly between the items.

2. align-items: The align-items property controls the alignment of flex items along the cross axis of the flex container. It specifies how items are positioned within their container along this axis. It accepts values such as flex-start, flex-end, center, baseline, and stretch.

For instance, if you set align-items: center;, flex items will be vertically centered within the container. If you set align-items: stretch;, items will expand to fill the entire cross-axis space of the container, ensuring they have the same height.

3. gap: The gap property is used to define the space between flex items in both directions, both along the main axis and the cross axis. It's often applied to the flex container itself. It simplifies spacing and creates consistent gaps between items without needing to apply margins to individual items.

For example, if you set gap: 20px;, there will be a 20-pixel gap between adjacent flex items in both the horizontal and vertical directions, improving the overall spacing and alignment of items within the container.

4. flex-direction: The flex-direction property determines the direction in which flex items are placed within the

flex container. It defines the main axis and, consequently, the layout flow. It can have values such as row,row-reverse, column, or column-reverse.

5. flex-wrap: The flex-wrap property controls whether flex items are allowed to wrap onto multiple lines (new rows or columns) within the flex container when they don't fit along the main axis. It accepts values like nowrap, wrap, and wrap-reverse.

For instance, if you set flex-wrap: wrap;, flex items will wrap to the next line when there's not enough space on the current line, creating a multi-line layout. flex-wrap is useful for accommodating various screen sizes and orientations, allowing items to adapt to different viewports and preventing content from getting cut off.

These properties play a critical role in creating well-structured and visually pleasing layouts in Flexbox, allowing you to control the positioning, alignment, and spacing of flex items within a container.

============================================================================================================================================================================================
